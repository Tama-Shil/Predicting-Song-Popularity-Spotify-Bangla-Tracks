# -*- coding: utf-8 -*-
"""CategorizationOfDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hMHd4XbTU92SMg2nHyEWo4VBQbUIzX2B

# **importing libraries and connecting to datasets**
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split, cross_val_score, KFold
import seaborn as sns
file_path = '/content/SBT datasets/data(raw audio features).csv'
data = pd.read_csv(file_path)

"""# **DATA PREPROCESSING**

**danceability categorization  **

*   no-dance(0.0–0.49)
*   mid-dance (0.5–0.69)
*   high-dance (0.70–1.0)
"""

def categorize_danceability(danceability):
    if danceability < 0.5:
        return 'No-dance'
    elif 0.5 <= danceability < 0.7:
        return 'Mid-dance'
    elif 0.7 <= danceability < 1.0:
        return 'High-dance'

df = pd.read_csv('/content/SBT datasets/data(raw audio features).csv')

df['danceability'] = df['danceability'].apply(categorize_danceability)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**energy categorization  **

*   high-energy (0.0–0.49)
*   low-dance (0.5–1.0)

"""

def categorize_energy(energy):
    if energy < 0.5:
        return 'Low Energy'
    else:
        return 'High Energy'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['energy'] = df['energy'].apply(categorize_energy)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**key categorization  **

*   enharmonic keys [has no unique name]  (1, 3, 6, 8, 10)
*   non-enharmonic keys [has unique name]  (0, 2, 4, 5, 7, 9, 11)
*   unknown (-1)

"""

def categorize_key(key):
    if key == -1:
        return 'Unknown'
    elif key == 1  or key == 3 or key == 6 or key == 8 or key == 10:
        return 'Enharmonic'
    else:
        return 'Non-enharmonic'


df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['key'] = df['key'].apply(categorize_key)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**loudness categorization  **

*   loud (-11 or upper)
*   normal (-14 to -12)
*   unknown (-15 or lower)


"""

def categorize_loudness(loudness):
    if loudness >= -11:
        return 'Loud'
    elif loudness >= -14:
        return 'Normal'
    else:
        return 'Quiet'


df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['loudness'] = df['loudness'].apply(categorize_loudness)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**speechiness categorization  **

*   no speech (0 - 0.33)
*   mixed (0.34 - 0.66)
*   speech (0.67 to 1.0)
"""

df = pd.read_csv('/content/SBT_categorized_dataset.csv')
bins = [0, 0.33, 0.66, 1]
labels = ['No Speech', 'Mixed', 'Speech']
df['speechiness'] = pd.cut(df['speechiness'], bins=bins, labels=labels, right=False)
df.to_csv('SBT_categorized_dataset.csv', index=False)

"""**acousticness categorization  **

*   non-acoustic (0 - 0.5)
*   acoustic (0.51 - 1.0)
"""

bins = [0, 0.5, 1]
labels = ['Non-Acoustic', 'Acoustic']
df = pd.read_csv('/content/SBT_categorized_dataset.csv')
df['acousticness'] = pd.cut(df['acousticness'], bins=bins, labels=labels, right=False)
df.to_csv('SBT_categorized_dataset.csv', index=False)

"""**instrumentalness categorization  **

*   vocal (0 - 0.5)
*   instrumental (0.51 - 1.0)
"""

bins = [0, 0.5, 1]
labels = ['Vocal', 'Instrumental']
df = pd.read_csv('/content/SBT_categorized_dataset.csv')
df['instrumentalness'] = pd.cut(df['instrumentalness'], bins=bins, labels=labels, right=False)
df.to_csv('SBT_categorized_dataset.csv', index=False)

"""**liveness categorization  **

*   recorded (0 - 0.79)
*   live (**0.8** - 1.0)
"""

def categorize_liveness(liveness):
    if liveness < 0.8:
        return 'Recorded'
    else:
        return 'Live'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['liveness'] = df['liveness'].apply(categorize_liveness)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**valence categorization  **

*   Negative (0 - 0.5)
*   Positive (0.51 - 1.0)
"""

def categorize_valence(valence):
    if valence <= 0.5:
        return 'Negative'
    else:
        return 'Positive'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['valence'] = df['valence'].apply(categorize_valence)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**tempo categorization  **

*   slow (0 - 110)
*   medium (110 - 140)
*   fast (140 - inf)

"""

def categorize_tempo(tempo):
    if tempo < 110:
        return 'Slow'
    elif tempo > 140:
        return 'Fast'
    else:
        return 'Medium'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['tempo'] = df['tempo'].apply(categorize_tempo)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**duration categorization  **

*   short ( < 3 mins)
*   medium (3  - 6 mins)
*   fast ( > 6 mins )
"""

def categorize_duration(duration):
    if duration < 180:
        return 'Short'
    elif duration > 360:
        return 'Long'
    else:
        return 'Medium'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['duration'] = df['duration'].apply(categorize_duration)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**time_signature categorization  **

*   simple (0 - 4)
*   complex (5 - 7)
*   compound (> 7)
"""

def categorize_time_signature(time_signature):
    if time_signature <= 4:
        return 'Simple'
    elif time_signature > 7:
        return 'Compound'
    else:
        return 'Complex'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['time_signature'] = df['time_signature'].apply(categorize_time_signature)

df.to_csv('SBT_categorized_dataset.csv',index=False)

"""**popularity (target-class) categorization  **

*   not popular (0 - 10)
*   kind of popular (11 - 30)
*   popular (31 - 50)
*   very popular (51 - 100)
"""

def categorize_popularity(popularity):
    if popularity <= 10:
        return 'Not Popular'
    elif 10 < popularity <= 30:
        return 'Mainstream'
    elif 30 < popularity <= 50:
        return 'Kind of Popular'
    else:
        return 'Popular'

df = pd.read_csv('/content/SBT_categorized_dataset.csv')

df['popularity'] = df['popularity'].apply(categorize_popularity)

df.to_csv('SBT_categorized_dataset.csv',index=False)
print(df)